import numpy as np
import matplotlib.pyplot as plt

# Gaussian kernel
def kernel(x, xi, tau):
    return np.exp(-np.sum((x - xi) ** 2) / (2 * tau ** 2))

# Locally Weighted Regression
def lwr(x, X, y, tau):
    w = np.diag([kernel(x, xi, tau) for xi in X])
    theta = np.linalg.pinv(X.T @ w @ X) @ X.T @ w @ y
    return x @ theta

# Create data
X = np.linspace(0, 2 * np.pi, 100)
y = np.sin(X) + 0.1 * np.random.randn(100)
X_b = np.c_[np.ones(X.shape), X]

# Test points
X_test = np.linspace(0, 2 * np.pi, 200)
X_test_b = np.c_[np.ones(X_test.shape), X_test]

# Predict
tau = 0.5
y_pred = [lwr(xi, X_b, y, tau) for xi in X_test_b]

# Plot
plt.scatter(X, y, color='red', label='Data')
plt.plot(X_test, y_pred, color='blue', label='LWR')
plt.legend()
plt.show()


7……………..
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error, r2_score

# Linear Regression on California Housing
def linear_regression():
    data = fetch_california_housing(as_frame=True)
    X = data.data[["AveRooms"]]
    y = data.target

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
    model = LinearRegression().fit(X_train, y_train)
    y_pred = model.predict(X_test)

    plt.scatter(X_test, y_test, color="blue", label="Actual")
    plt.plot(X_test, y_pred, color="red", label="Predicted")
    plt.title("Linear Regression - Housing")
    plt.xlabel("AveRooms")
    plt.ylabel("Target")
    plt.legend()
    plt.show()

    print("Linear Regression:\nMSE =", mean_squared_error(y_test, y_pred))
    print("R² =", r2_score(y_test, y_pred))

# Polynomial Regression on Auto MPG
def polynomial_regression():
    url = "https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data"
    cols = ["mpg", "cyl", "disp", "hp", "weight", "acc", "year", "origin"]
    data = pd.read_csv(url, delim_whitespace=True, names=cols, na_values="?").dropna()

    X = data[["disp"]]
    y = data["mpg"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    model = make_pipeline(PolynomialFeatures(2), StandardScaler(), LinearRegression())
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    plt.scatter(X_test, y_test, color="blue", label="Actual")
    plt.scatter(X_test, y_pred, color="red", label="Predicted", s=10)
    plt.title("Polynomial Regression - Auto MPG")
    plt.xlabel("Displacement")
    plt.ylabel("MPG")
    plt.legend()
    plt.show()

    print("Polynomial Regression:\nMSE =", mean_squared_error(y_test, y_pred))
    print("R² =", r2_score(y_test, y_pred))

# Run both
linear_regression()
polynomial_regression()

8…………….
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score

# Load data
X, y = load_breast_cancer(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print(f"Accuracy: {accuracy_score(y_test, y_pred) * 100:.2f}%")

# Predict a sample
sample = X_test[0].reshape(1, -1)
result = model.predict(sample)[0]
print("Prediction:", "Benign" if result == 1 else "Malignant")

# Visualize tree
plt.figure(figsize=(10, 6))
plot_tree(model, filled=True)
plt.title("Decision Tree - Breast Cancer")
plt.show()



9………………….
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_olivetti_faces
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

# Load dataset
faces = fetch_olivetti_faces(shuffle=True, random_state=42)
X, y = faces.data, faces.target

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train and predict
model = GaussianNB()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Accuracy
print(f"Accuracy: {accuracy_score(y_test, y_pred) * 100:.2f}%")

# Cross-validation
cv_score = cross_val_score(model, X, y, cv=5).mean()
print(f"Cross-validation Accuracy: {cv_score * 100:.2f}%")

# Plot few results
fig, axes = plt.subplots(3, 5, figsize=(12, 6))
for ax, img, true, pred in zip(axes.ravel(), X_test, y_test, y_pred):
    ax.imshow(img.reshape(64, 64), cmap='gray')
    ax.set_title(f"T:{true} P:{pred}")
    ax.axis('off')
plt.tight_layout()
plt.show()


10……………….
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_breast_cancer
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import confusion_matrix, classification_report

# Load and scale data
data = load_breast_cancer()
X = StandardScaler().fit_transform(data.data)
y = data.target

# KMeans clustering
kmeans = KMeans(n_clusters=2, random_state=42)
y_kmeans = kmeans.fit_predict(X)

# Evaluation
print("Confusion Matrix:\n", confusion_matrix(y, y_kmeans))
print("\nClassification Report:\n", classification_report(y, y_kmeans))

# PCA for 2D visualization
X_pca = PCA(n_components=2).fit_transform(X)
centers = PCA(n_components=2).fit(X).transform(kmeans.cluster_centers_)

# Create DataFrame for plotting
df = pd.DataFrame(X_pca, columns=['PC1', 'PC2'])
df['Cluster'] = y_kmeans
df['True'] = y

# Plot clusters, true labels, and centroids
fig, axs = plt.subplots(1, 3, figsize=(18, 5))

sns.scatterplot(data=df, x='PC1', y='PC2', hue='Cluster', ax=axs[0], palette='Set1')
axs[0].set_title('K-Means Clusters')

sns.scatterplot(data=df, x='PC1', y='PC2', hue='True', ax=axs[1], palette='coolwarm')
axs[1].set_title('True Labels')

sns.scatterplot(data=df, x='PC1', y='PC2', hue='Cluster', ax=axs[2], palette='Set1')
axs[2].scatter(centers[:, 0], centers[:, 1], c='red', marker='X', s=200, label='Centroids')
axs[2].legend()
axs[2].set_title('Clusters with Centroids')

plt.tight_layout()
plt.show()